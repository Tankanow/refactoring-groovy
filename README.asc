refactoring-groovy 
===================
Adam Tankanow <adam.tankanow@gmail.com>
v0.1, 2013-01-25


[quote, Martin Fowler, Refactoring: Improving the Design of Existing Code]
____________________________________________________________________________
"Any fool can write code that a computer can understand.  Good programmers write code that humans can understand."
____________________________________________________________________________




.Preamble
Hi everybody.  Hi Doctor Nick!  I started this project because I recently started reading Martin Fowler's http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672/ref=sr_1_1?ie=UTF8&qid=1359169163&sr=8-1&keywords=refactoring+improving[Refactoring: Improving the Design of Existing Code].  Funny: this book is 12 years young; yet, I still see unfactored code (meaningless names, order of magnitude 100 line long methods etc.) in production today.

.Goal
A developer I admire recently posted on Twitter that he felt the best way to learn a programming language or concepts was to code, code and code.  My goal in this project is to internalize the catalog of refactoring patterns in Fowler's book while learning a language (http://groovy.codehaus.org[Groovy]), a build tool (http://www.gradle.org[Gradle]) and a testing framework (https://code.google.com/p/spock[Spock]).


.How to Use
Each branch represents a separate chapter in the book.  Each commit on a chapter branch should be some form of refactoring.  Of course, there have been some commits to this README and for gitignores and such so there are some intermittent non-refactor commits.  I have tried to indicate those in the commit summary.  Also, I recommend expanding all commit messages because some contain verbose explanations of the what and why of the refactor represented in that commit.


Cheers,

Adam